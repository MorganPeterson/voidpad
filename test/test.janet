(use /build/voidpad)
(use judge)

(def buf1 (make-void-pad))
(def buf2 (make-void-pad ""))
(def pangram "The quick brown fox\njumps over\nthe lazy dog\n")

(defn tests
  []
  (test "init"
        (expect (vp->string buf1) "")
        (expect (vp->string buf2) "")
        (expect (vp-insert-char buf2 ((string/bytes "h") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "e") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "l") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "l") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "o") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes ",") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes " ") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "w") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "o") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "r") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "l") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "d") 0)) true)
        (expect (vp-insert-char buf2 ((string/bytes "!") 0)) true)
        (expect (vp->string buf2) "hello, world!"))

  (test "queries"
        (expect (vp-point buf1) 0)
        (expect (vp-point buf2) 13)
        (expect (vp-point-max buf1) 0)
        (expect (vp-point-max buf2) 13)
        (expect (vp-point-min buf1) 0)
        (expect (vp-point-min buf2) 0)
        (expect (vp-usr-size buf1) 0)
        (expect (vp-usr-size buf2) 13)
        (expect (vp-gap-size buf1) 4)
        (expect (vp-gap-size buf2) 3)
        (expect (vp-all-size buf1) 4) 
        (expect (vp-all-size buf2) 16)
        (expect (vp-gap-offset buf1) 0)
        (expect (vp-gap-offset buf2) 13)
        (expect (vp-aft-offset buf1) 4)
        (expect (vp-aft-offset buf2) 16)
        (expect (string/from-bytes (vp-char-before buf1)) "\0")
        (expect (string/from-bytes (vp-char-before buf2)) "!")
        (expect (string/from-bytes (vp-char-after buf1)) "\0")
        (expect (string/from-bytes (vp-char-after buf2)) "\0")
        (expect (vp-bolp buf1) true)
        (expect (vp-bolp buf2) false)
        (expect (vp-eolp buf1) true)
        (expect (vp-eolp buf2) true)
        (expect (vp-bobp buf1) true)
        (expect (vp-bobp buf2) false)
        (expect (vp-eobp buf1) true)
        (expect (vp-eobp buf2) true))

  (test "munging"
        (expect (vp-insert-char buf1 100) true)
        (expect (vp->string buf1) "d")
        (expect (vp-insert-string buf1 "A fine day.") true)
        (expect (vp->string buf1) "dA fine day.")
        (expect (vp-delete-char buf1 1) 0)
        (expect (vp->string buf1) "dA fine day.")
        (expect (vp-delete-char buf1 10) 0)
        (expect (vp->string buf1) "dA fine day.")
        (expect (vp-delete-char buf1 -1) -1)
        (expect (vp->string buf1) "dA fine day")
        (expect (vp-delete-char buf1 -5) -5)
        (expect (vp->string buf1) "dA fin")
        (expect (vp-delete-char buf1 -7) -6)
        (expect (vp->string buf1) "")
        (expect (vp-delete-region buf2 5 13) true)
        (expect (vp->string buf2) "hello")
        (expect (vp-erase buf2) true)
        (expect (vp->string buf2) "")
        (expect (vp-insert-string buf1 pangram) true)
        (expect (vp->string buf1) "The quick brown fox\njumps over\nthe lazy dog\n"))

  (test "moving"
        (expect (vp-forward-char buf1 2) true)
        (expect (vp-forward-char buf1 -6) true)
        (expect (string/from-bytes (vp-char-before buf1)) "z")
        (expect (string/from-bytes (vp-char-after buf1)) "y")
        (expect (vp-forward-line buf1 -1) true)
        (expect (string/from-bytes (vp-char-before buf1)) "o")
        (expect (string/from-bytes (vp-char-after buf1)) "v")
        (expect (vp-forward-line buf1 -1) true)
        (expect (string/from-bytes (vp-char-before buf1)) "i")
        (expect (string/from-bytes (vp-char-after buf1)) "c")
        (expect (vp-forward-line buf1 -1) false)
        (expect (string/from-bytes (vp-char-before buf1)) "i")
        (expect (string/from-bytes (vp-char-after buf1)) "c")
        
        (expect (vp-forward-line buf1 1) true)
        (expect (string/from-bytes (vp-char-before buf1)) "o")
        (expect (string/from-bytes (vp-char-after buf1)) "v")
        (expect (vp-forward-line buf1 1) true)
        (expect (string/from-bytes (vp-char-before buf1)) "z")
        (expect (string/from-bytes (vp-char-after buf1)) "y")
        (expect (vp-forward-line buf1 1) false)
        (expect (string/from-bytes (vp-char-before buf1)) "z")
        (expect (string/from-bytes (vp-char-after buf1)) "y")
        (expect (vp-forward-line buf1 -1) true)
        (expect (string/from-bytes (vp-char-before buf1)) "o")
        (expect (string/from-bytes (vp-char-after buf1)) "v")
        (expect (vp-beginning-of-line buf1) true)
        (expect (string/from-bytes (vp-char-after buf1)) "j")
        (expect (vp-bolp buf1) true)
        (expect (vp-eolp buf1) false)
        (expect (vp-end-of-line buf1) true)
        (expect (vp-bolp buf1) false)
        (expect (vp-eolp buf1) true)
        (expect (string/from-bytes (vp-char-before buf1)) "r")
        (expect (vp-goto-char buf1 6) true)
        (expect (string/from-bytes (vp-char-before buf1)) "u")
        (expect (string/from-bytes (vp-char-after buf1)) "i")
        (expect (vp-goto-char buf1 300) true)))

(tests)
