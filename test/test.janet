(use /build/voidpad)
(use judge)

(def buf1 (new))
(def buf2 (new ""))
(def pangram "The quick brown fox\njumps over\nthe lazy dog\n")

(defn tests
  []
  (test "init"
        (expect (to-string buf1) "")
        (expect (to-string buf2) "")
        (expect (insert-char buf2 ((string/bytes "h") 0)) true)
        (expect (insert-char buf2 ((string/bytes "e") 0)) true)
        (expect (insert-char buf2 ((string/bytes "l") 0)) true)
        (expect (insert-char buf2 ((string/bytes "l") 0)) true)
        (expect (insert-char buf2 ((string/bytes "o") 0)) true)
        (expect (insert-char buf2 ((string/bytes ",") 0)) true)
        (expect (insert-char buf2 ((string/bytes " ") 0)) true)
        (expect (insert-char buf2 ((string/bytes "w") 0)) true)
        (expect (insert-char buf2 ((string/bytes "o") 0)) true)
        (expect (insert-char buf2 ((string/bytes "r") 0)) true)
        (expect (insert-char buf2 ((string/bytes "l") 0)) true)
        (expect (insert-char buf2 ((string/bytes "d") 0)) true)
        (expect (insert-char buf2 ((string/bytes "!") 0)) true)
        (expect (to-string buf2) "hello, world!"))

  (test "queries"
        (expect (point buf1) 0)
        (expect (point buf2) 13)
        (expect (point-max buf1) 0)
        (expect (point-max buf2) 13)
        (expect (point-min buf1) 0)
        (expect (point-min buf2) 0)
        (expect (usr-size buf1) 0)
        (expect (usr-size buf2) 13)
        (expect (gap-size buf1) 4)
        (expect (gap-size buf2) 3)
        (expect (size buf1) 4) 
        (expect (size buf2) 16)
        (expect (gap-offset buf1) 0)
        (expect (gap-offset buf2) 13)
        (expect (aft-offset buf1) 4)
        (expect (aft-offset buf2) 16)
        (expect (string/from-bytes (char-before buf1)) "\0")
        (expect (string/from-bytes (char-before buf2)) "!")
        (expect (string/from-bytes (char-after buf1)) "\0")
        (expect (string/from-bytes (char-after buf2)) "\0")
        (expect (bolp buf1) true)
        (expect (bolp buf2) false)
        (expect (eolp buf1) true)
        (expect (eolp buf2) true)
        (expect (bobp buf1) true)
        (expect (bobp buf2) false)
        (expect (eobp buf1) true)
        (expect (eobp buf2) true))

  (test "munging"
        (expect (insert-char buf1 100) true)
        (expect (to-string buf1) "d")
        (expect (insert-string buf1 "A fine day.") true)
        (expect (to-string buf1) "dA fine day.")
        (expect (delete-char buf1 1) 0)
        (expect (to-string buf1) "dA fine day.")
        (expect (delete-char buf1 10) 0)
        (expect (to-string buf1) "dA fine day.")
        (expect (delete-char buf1 -1) -1)
        (expect (to-string buf1) "dA fine day")
        (expect (delete-char buf1 -5) -5)
        (expect (to-string buf1) "dA fin")
        (expect (delete-char buf1 -7) -6)
        (expect (to-string buf1) "")
        (expect (delete-region buf2 5 13) true)
        (expect (to-string buf2) "hello")
        (expect (erase buf2) true)
        (expect (to-string buf2) "")
        (expect (insert-string buf1 pangram) true)
        (expect (to-string buf1) "The quick brown fox\njumps over\nthe lazy dog\n"))

  (test "moving"
        (expect (forward-char buf1 2) true)
        (expect (forward-char buf1 -6) true)
        (expect (string/from-bytes (char-before buf1)) "z")
        (expect (string/from-bytes (char-after buf1)) "y")
        (expect (forward-line buf1 -1) true)
        (expect (string/from-bytes (char-before buf1)) "o")
        (expect (string/from-bytes (char-after buf1)) "v")
        (expect (forward-line buf1 -1) true)
        (expect (string/from-bytes (char-before buf1)) "i")
        (expect (string/from-bytes (char-after buf1)) "c")
        (expect (forward-line buf1 -1) false)
        (expect (string/from-bytes (char-before buf1)) "i")
        (expect (string/from-bytes (char-after buf1)) "c")
        
        (expect (forward-line buf1 1) true)
        (expect (string/from-bytes (char-before buf1)) "o")
        (expect (string/from-bytes (char-after buf1)) "v")
        (expect (forward-line buf1 1) true)
        (expect (string/from-bytes (char-before buf1)) "z")
        (expect (string/from-bytes (char-after buf1)) "y")
        (expect (forward-line buf1 1) false)
        (expect (string/from-bytes (char-before buf1)) "z")
        (expect (string/from-bytes (char-after buf1)) "y")
        (expect (forward-line buf1 -1) true)
        (expect (string/from-bytes (char-before buf1)) "o")
        (expect (string/from-bytes (char-after buf1)) "v")
        (expect (beginning-of-line buf1) true)
        (expect (string/from-bytes (char-after buf1)) "j")
        (expect (bolp buf1) true)
        (expect (eolp buf1) false)
        (expect (end-of-line buf1) true)
        (expect (bolp buf1) false)
        (expect (eolp buf1) true)
        (expect (string/from-bytes (char-before buf1)) "r")
        (expect (goto-char buf1 6) true)
        (expect (string/from-bytes (char-before buf1)) "u")
        (expect (string/from-bytes (char-after buf1)) "i")
        (expect (goto-char buf1 300) true)))

(tests)
